distcov_spatial <- function(X, bias_corr = TRUE, metr.X = "euclidean", isotropic = FALSE) {
    coords <- coordinates(X)
    names_X <- names(X)
    if (length(names_X) != 1)
        stop ("Function works currently only for univariate fields")
    if (isotropic) {
        distances <- gDistance(coords)
    } else {
        lags <- calculate_lags(coords)
        n <- nrow(lags)
        distcov_spdf <- SpatialPointsDataFrame(coords = lags, data = data.frame(distcov = rep(NA, n)))
        while (n > 0) {
            coords_shifted <- data.table::copy(coords)
            coords_shifted <- add_vector(coords_shifted, lags[n, ])
            idx_common <- match_coords(coords, coords_shifted)
            sampleX <- X[[names_X]][idx_common[, 1]]
            sampleY <- X[[names_X]][idx_common[, 2]]
            distcov_spdf$distcov[n] <- ifelse(is.null(sampleX), NA, distcov(sampleX, sampleY, bias_corr = FALSE))
            n <- n - 1
        }

    }
    return (distcov_spdf)
}

calculate_lags <- function(coord_matrix) {
    lag <- 1
    n <- nrow(coord_matrix)
    lag_matrix <- matrix(ncol = 2, nrow = n * (n - 1) / 2)
    start_idx <- 1
    end_idx <- n - 1
    while (n > 1) {
        lag_matrix[start_idx:end_idx, ] <- diff(coord_matrix, lag = lag)
        lag <- lag + 1
        start_idx <- start_idx + n - 1
        end_idx <- end_idx + n - 2
        n <- n - 1
    }
    return (unique(lag_matrix))
}


